/**
 * Документация
 *
 * Добавление баннера
 *
 *  == Тип баннера
 *  var type = 'adfox';
 *
 *  == Настройки баннера из адфокса
 *  var options = {
          ownerId: 235522,
          params: {
            pp: 'h',
            ps: 'cdnj',
            p2: 'fuqy'
          }
     };
    == Идентификатор элемента <div> контейнера, в который будет вставлен контент баннера
 *   var element_container_id = 'banner-test-uniqueid';
 *
 *  Banners.banner(type, options ,element_container_id);
 *
 *
 *  Работа со всем  массивом банеров
 *
 *  Banners.reloadAll(); - Метод обновляет все баннеры на странице
 *  Banners.reloadVisible(); - Метод обновляет все видимые баннеры в текущей видимой области экрана пользователя
 *  Banners.hideAll();  - Метод скрывает все баннеры на странице, есть опция постоянного скрытия
 *  Banners.showAll();  - Метод отменяет скрытие баннеров вызванное ранее методом hideAll()
 *
 *
 *  Работа с коллекциями баннеров и фильтрация (возвращает новый объект {@see BannersCollection})
 *  @see BannersCollection
 *
 *  Banners.banners.filter('position','2016_top_head'); - вернет коллекцию баннеров в позиции 2016_top_head (баннер вверху страницы)
 *  Banners.banners.filter('type','adfox'); - вернет коллекцию баннеров c адаптером (типом) adfox
 *  Banners.banners.filter('time','15, '>'); - вернет коллекцию баннеров которые показываются больше  15 секунд
 *  Banners.banners.filter('time','15, '<'); - вернет коллекцию баннеров которые показываются меньше  15 секунд
 *  Banners.banners.filter('url','http://hello.ru/fashion/#s4'); - вернет коллекцию баннеров которые бали инициированы строго по адресу  http://hello.ru/fashion/#s4
 *  == Второй способ, с менее строгой проверкой адреса через регулярку
 *  Banners.banners.filter(function(banner) {
 *      return banner.getUrl().toString().match(new RegExp('https://ru.hellomagazine.com/fashion/.*'));
 *  });
 *  Banners.banners.filter('is_visible', true); - вернет коллекцию баннеров видимых в текущей видимой области экрана пользователя
 *  Banners.banners.filter('is_visible', false); - вернет коллекцию баннеров не попавших в текущую область экрана пользователя
 *
 *  Banners.banners.filter('id', 'bebebe'); - вернет баннер, котнтейнер которого имеет указанный ID
 *
 * При фильтрации можно использовать сразу несколько фильтров
 *
 * Banners.banners.filter('position','2016_top_head').filter('time','15, '>'); - вернет коллекцию баннеров в позиции 2016_top_head которые показываются на странице уже больше 15 секунд
 *
 *
 *
 *
 */
(function(){function l(){function n(a){return a?"object"===typeof a||"function"===typeof a:!1}var p=null;var g=function(a,b){function f(){}if(!n(a)||!n(b))throw new TypeError("Cannot create proxy with a non-object as target or handler");p=function(){f=function(a){throw new TypeError("Cannot perform '"+a+"' on a proxy that has been revoked");}};var e=b;b={get:null,set:null,apply:null,construct:null};for(var k in e){if(!(k in b))throw new TypeError("Proxy polyfill does not support trap '"+k+"'");b[k]=e[k]}"function"===
typeof e&&(b.apply=e.apply.bind(e));var c=this,g=!1,q=!1;"function"===typeof a?(c=function(){var h=this&&this.constructor===c,d=Array.prototype.slice.call(arguments);f(h?"construct":"apply");return h&&b.construct?b.construct.call(this,a,d):!h&&b.apply?b.apply(a,this,d):h?(d.unshift(a),new (a.bind.apply(a,d))):a.apply(this,d)},g=!0):a instanceof Array&&(c=[],q=!0);var r=b.get?function(a){f("get");return b.get(this,a,c)}:function(a){f("get");return this[a]},v=b.set?function(a,d){f("set");b.set(this,
    a,d,c)}:function(a,b){f("set");this[a]=b},t={};Object.getOwnPropertyNames(a).forEach(function(b){if(!((g||q)&&b in c)){var d={enumerable:!!Object.getOwnPropertyDescriptor(a,b).enumerable,get:r.bind(a,b),set:v.bind(a,b)};Object.defineProperty(c,b,d);t[b]=!0}});e=!0;Object.setPrototypeOf?Object.setPrototypeOf(c,Object.getPrototypeOf(a)):c.__proto__?c.__proto__=a.__proto__:e=!1;if(b.get||!e)for(var m in a)t[m]||Object.defineProperty(c,m,{get:r.bind(a,m)});Object.seal(a);Object.seal(c);return c};g.revocable=
    function(a,b){return{proxy:new g(a,b),revoke:p}};return g};var u="undefined"!==typeof process&&"[object process]"==={}.toString.call(process)||"undefined"!==typeof navigator&&"ReactNative"===navigator.product?global:self;u.Proxy||(u.Proxy=l(),u.Proxy.revocable=u.Proxy.revocable);})()

var $_COOKIE = {
    get: function (name) {
        var matches = document.cookie.match(new RegExp(
            "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\\\$1') + "=([^;]*)"
        ));
        return matches ? decodeURIComponent(matches[1]) : null;
    },
    set: function (name, value, props) {
        props = props || {};
        var exp = props.expires;
        if (typeof exp == "number" && exp) {
            var d = new Date();
            d.setTime(d.getTime() + exp * 10000);
            exp = props.expires = d;
        }
        if (exp && exp.toUTCString) {
            props.expires = exp.toUTCString()
        }
        value = encodeURIComponent(value);
        var updatedCookie = name + "=" + value;
        for (var propName in props) {
            updatedCookie += "; " + propName;
            var propValue = props[propName];
            if (propValue !== true) {
                updatedCookie += "=" + propValue
            }
        }
        document.cookie = updatedCookie;
    },
    delete: function (name) {
        this.set(name, null, {expires: -1});
    }
};

/**
 * Класс баннера
 * @constructor
 *
 * @param data - Объект баннера принимает массив настроек
 * [
 *     id - идентификатор контейнера (#banner-rand)
 *     element - сам элемент DOM (не jquery)
 *     type - тип адаптера (адфокс, адривер и тд)
 *     position - идентификатор позиции (дата атрибут родительского контейнера в котором лежат баннеры)
 *     options - массив данных для передачи настроек для инциализации баннера через адаптер @see Banners.base_adapter.render()
 *     adapter - сам объект адаптера @see Banners.adapter
 * ]
 *
 *
 */
var Banner = function (data) {
    this.id = '';
    this.element = null;
    this.type = null;
    this.position = '';
    this.position_element = null;
    this.adapter = null;
    this.options = null;

    this.url = window.location.href;
    this.time = Math.floor(Date.now() / 1000);
    this.is_show = true;
    this.is_rendered = false;

    // Массив дополнительных произволдьных данных
    this.data = {};
    for (var key in data) {
       if (data.hasOwnProperty(key)) {
           this.setData(key,data[key]);
       }
    }
};
Banner.prototype = {
    setData: function (key, value) {
        if (this.hasOwnProperty(key) && typeof (this[key]) !== 'function') {
            this[key] = value;
        } else  {
            this.data[key] = value;
        }
    },
    getData: function (key) {
        if (key === 'time') {
            return this.getTimer();
        } else if (key === 'is_visible') {
            return this.isVisible();
        } else if (this.hasOwnProperty(key)) {
            return this[key];
        } else if (this.data.hasOwnProperty(key)) {
            return this.data[key];
        }
        return null;
    },
    getId: function () {
        return this.getData('id');
    },
    getType: function () {
        return this.getData('type');
    },
    getPosition: function () {
        return this.getData('position');
    },
    getElement: function () {
        return this.getData('element');
    },
    getOptions: function () {
        return this.getData('options');
    },
    getUrl: function () {
        return this.getData('url');
    },

    isShow: function () {
        return this.is_show;
    },
    isRendered: function () {
        return this.is_rendered;
    },
    isVisible: function () {
        var rect = this.getElement().getBoundingClientRect();
        var viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight);
        return !(rect.bottom < 0 || rect.top - viewHeight >= 0);
    },
    hide: function () {
        var adapter = this.getData('adapter');
        if (adapter && adapter.hasOwnProperty('hide') && typeof(adapter.hide) === "function") {
            adapter.hide(this);
        } else {
            return this.element.style.display = 'none';
        }
        this.is_show = false;
    },
    show: function () {
        if (!this.is_rendered) {
            this.render();
        }
        var adapter = this.getData('adapter');
        if (adapter && adapter.hasOwnProperty('show') && typeof(adapter.show) === "function") {
            adapter.show(this);
        } else {
            return this.element.style.display = '';
        }
        this.is_show = true;
    },
    render: function () {
        if ($_COOKIE.get('Banners_js') === 'hide') {
            return false;
        }
        var adapter = this.getData('adapter');
        if (adapter) {
            this.is_rendered = true;
            return adapter.render(this);
        }
        return false;
    },

    reload: function () {
        if ($_COOKIE.get('Banners_js') === 'hide') {
            return false;
        }
        var adapter = this.getData('adapter');
        if (adapter && (!adapter.hasOwnProperty('beforeReload') || adapter.beforeReload(this))) {
            if (!this.is_rendered) {
                return this.render();
            }
            adapter.reload(this);
            if (adapter.hasOwnProperty('afterReload')) {
                adapter.afterReload(this);
            }
        }
    },

    remove: function () {
        var element = this.getData('element');
        if (element) {
            element.remove();
            Banners.banners.removeById(this.getId());
            return true;
        }
        return false;
    },

    restartTimer: function () {
        this.time = Math.floor(Date.now() / 1000);
    },

    getTimer: function () {
        return (Math.floor(Date.now() / 1000)) - this.time;
    }
};


var BannersCollection = function () {
    this.banners = {};
    this._count = 0;
};

BannersCollection.prototype = {

    set: function (banner) {
        this.banners[this._count] = banner;
        this._count++;
    },

    getById: function (id) {
        if (this.banners.hasOwnProperty(id)) {
            return this.banners[id];
        }
        return null;
    },

    filter: function (data_key, filter_value, condition) {
        condition = condition || '=';
        var collection = new BannersCollection();
        var banners = this.banners;
        for (var id in banners) {
            var banner = banners[id];
            if (typeof(data_key) === 'function') {
                if (!data_key(banner)) {
                    continue;
                }
            } else {
                var banner_value = banner.getData(data_key);
                if (data_key === 'url') {
                    if (filter_value.indexOf(banner_value) === -1) {
                        continue;
                    }
                } else if (condition === '=' && banner_value !== filter_value) {
                    continue;
                } else if (condition === '<' && filter_value < banner_value) {
                    continue;
                } else if (condition === '>' && filter_value > banner_value) {
                    continue;
                }
            }
            collection.set(banner);
        }
        return collection;
    },

    callback: function (func) {
        var banners = this.banners;
        for (var id in banners) {
            func(banners[id]);
        }
    },

    getAll: function () {
        return this.banners;
    },

    show: function () {
        this.callback(function (banner) {
            banner.show();
        });
    },
    hide: function () {
        this.callback(function (banner) {
            banner.hide();
        });
    },
    reload: function () {
        this.callback(function (banner) {
            banner.reload();
        });
    },
    remove: function () {
        this.callback(function (banner) {
            banner.remove();
        });
    },
    removeById:function(id) {
        var banners = this.banners;
        for (var index in banners) {
            if(banners.hasOwnProperty(index) && banners[index].getId()=== id) {
                delete(this.banners[index]);
            }
        }
    },
    count: function () {
        return this._count;
    }
};


var Banners = {
    debug:false,
    isInited: false,
    settings: {
        /* Минимальное время показа баннера до перезагрузки, используется для ограничения частоты смены баннеров*/
        min_banner_show_time: 10, /* in seconds */
        position_container_class: '.banner',
        position_attr: 'data-key',
        banner_init_attr: 'data-banner-init'
    },

    banners: new BannersCollection(),
    reload_all_timer: 0,
    /**
     * reload_all_min_time - минимальное время видимости баннера в секундах
     */
    reload_all_min_time: 10,
    base_adapter: {

        /**
         * Функция инициализации адаптера, вызывается при каждом обращении к отрисовке баннера (render)
         * */
        init: function () {},

        /**
         * Инициализация контейнера баннера
         * вызывается перед отрисовкой баннера
         * @param container
         */
        initContainer: function (container) {
            var elem = false;
            if (container) {
                elem = document.getElementById(container);
            }
            if (elem) {
                return elem;
            } else {
                elem = document.getElementById('banner-init');
                if (elem) {
                    return elem;
                }
                var script = document.currentScript;
                if (script) {
                    elem = Banners.createBannerContainer();
                    script.parentNode.insertBefore(elem, document.currentScript);
                    return elem;
                } else {
                    console.log(
                        "Динамическое создание контейнера баннера не поддерживается в ajax подгрузке контента.\n" +
                        "используйте инициализацию с передачей элемента "
                        + "<div id='randomid-234234'><script>Banners.init('adfox',{...options},'randomid-234234');</script>"
                    );
                }
            }
            return false;
        },

        bindBannerToFunction: function (func, banner) {
            var element = banner.getElement();
            var options = banner.getOptions();
            return Banners.bindToFunction(func, {'banner': banner, 'container': element, 'options': options});
        },

        /**
         * Функция отрисовывает баннер
         * @param container -  объект element DOM (div) c уникальным id в котором будет отрисовываться реклама
         * @param options - {...}  объект опций (настроек) для инициализации баннера
         * */
        render: function (banner) {
            return false;
        },

        /**
         * Функция проверяет можно ли сменить(перезагрузить баннер) и готовит данные
         * @param banner - объект класса Banner
         * @see   Banner
         * @return boolean
         */
        beforeReload: function (banner) {
            var time = banner.getTimer();
            return (time > Banners.settings.min_banner_show_time);
        },

        /**
         * Функция делает смену баннера на новый в том же контейнере
         * @param  banner - объект класса Banner
         * @see   Banner
         */
        reload: function (banner) {},

        /**
         * Функция устанавливаетдополнительные данные после  загрузки
         * @param banner - объект класса Banner
         * @see   Banner
         * @return boolean
         */
        afterReload: function (banner) {
            banner.restartTimer();
        },

        /**
         *
         * @param  type
         * @see   adapters
         */
        reloadAll: function (type) {
            Banners.getAll(type).reload();
        },

        /**
         * Функция скрывает баннер
         * Контейнер баннера становится скрытым с помощью стиля "display: none".
         * @param  banner - объект класса Banner
         * @see   Banner
         */
        hide: function (banner) {
            banner.getElement().style.display = 'none';
        },

        /**
         * Функция показывает баннер
         * @see  отменяет действие функции this.hide();
         * @param  banner - объект класса Banner
         * @see   Banner
         */
        show: function (banner) {
            banner.getElement().style.display = '';
        },

        /**
         * Функция удаляет баннер и его контейнер
         * @see  отменяет действие функции this.hide();
         * @param  banner - объект класса Banner
         * @see   Banner
         */
        remove: function (banner) {
            banner.getElement().remove();
        }
    },
    init:function(settings) {
        if ($_COOKIE.get('Banners_js_debug') === '1') {
            this.debug = true;
        }
        if (this.isInited) {
            this.applySettings(settings);
        } else {
            this.isInited = true;
            if (this.debug) {
                console.log('Banners.js: INIT, settings:', settings);
            }
            this.applySettings(settings);
            for (var adapter_type in this.adapter) {
                if (this.adapter.hasOwnProperty(adapter_type)) {
                    var adapter = this.adapter[adapter_type];
                    if (adapter.hasOwnProperty('init') && typeof (adapter.init) === 'function') {
                        adapter.init();
                    }
                }
            }
            this.startReloadTimer();
        }
    },
    applySettings: function(settings){
        /**
         * Применяем пользовательские settings
         */
        if (typeof settings === 'object') {
            this.settings = Object.assign(this.settings, settings);
        }
    },
    setDebug: function(flag) {
        $_COOKIE.set('Banners_js_debug', (flag?'1':'0'));
        this.debug = flag;
    },
    adapter: {
        'adfox': {
            _decorator: {
               /* decorate_fucntions: {
                    create: function(target, name, receiver) {
                        var func = target[name];
                        var decorate_function =  function()
                        {
                            var options = arguments[0];
                            var element = document.getElementById(options['containerId']);
                            if(!element && Banners.debug) {
                                console.log('!!!! не найден элемент с id: '+options['containerId']);
                            }
                            if(Banners.debug) {
                                console.log('call function decorate :'+name, options, target);
                            }
                            if(element && !element.hasAttribute(Banners.settings.banner_init_attr)) {
                                var banner = Banners.initBanner('adfox', options, options['containerId']);
                                if(banner) {
                                    Banners.adapter.adfox.prepareOptions(banner);
                                    Banners.adapter.adfox.headerBidding(banner);
                                    Banners.adapter.adfox.beforeRender(banner);
                                    options = banner.getOptions();
                                    if(Banners.debug) {
                                        console.log('banner options:'+banner.getId(), banner.getOptions());
                                    }
                                }
                            }

                            func.apply(target, [options]);
                            return  func;
                        };
                        return decorate_function;
                    }
                },*/
                get: function(target, name, receiver) {

                    if(target.hasOwnProperty(name) && typeof target[name]==='function') {

                        var func = target[name];
                        var decorate_function =  function()
                        {
                            var options = arguments[0];
                            var element = document.getElementById(options['containerId']);
                            if(!element && Banners.debug) {
                                console.log('!!!! не найден элемент с id: '+options['containerId']);
                            }
                            if(Banners.debug) {
                                console.log('call function decorate :'+name, options, target);
                            }
                            if(element && !element.hasAttribute(Banners.settings.banner_init_attr)) {
                                var banner = Banners.initBanner('adfox', options, options['containerId']);
                                if(banner) {
                                     banner.setData('is_rendered', true);
                                    Banners.adapter.adfox.prepareOptions(banner);
                                    Banners.adapter.adfox.headerBidding(banner);
                                    Banners.adapter.adfox.beforeRender(banner);
                                    options = banner.getOptions();
                                    if(Banners.debug) {
                                        console.log('banner options:'+banner.getId(), banner.getOptions());
                                    }
                                }
                            }

                            func.apply(target, [options]);
                            return  func;
                       };
                        if(name==='create') {
                            return decorate_function;
                        } else if (name ==='createScroll') {
                            return decorate_function;
                       }
                        return func;
                    }
                    if(Banners.debug) {
                        console.log('get:', target, name, receiver);
                    }
                    if(target.hasOwnProperty(name)) {
                        return target[name];
                    } else {
                        if(Banners.debug) {
                            console.log('get:'+name+'not fount, SetTimeout start', target, name, receiver);
                        }
/*                      var self = this;
                        setTimeout(function () {
                            self.get(target, name, receiver);
                        },100);*/
                    }
                    if(name=='create' || name=='createScroll' || name=='reload') {
                        return function() {
                            console.log('get:'+name+'not fount, SetTimeout start', target, name, receiver);
                        };
                    }
                    return Reflect.get(target, name, receiver);
                },
                set: function(target, property, value, receiver) {
                    return Reflect.set(target, property, value, receiver)
                },
                apply: function(target, thisArg, argumentsList) {
                    return Reflect.apply(target, thisArg, argumentsList)
                },
                construct: function(target, argumentsList, newTarget) {
                    return Reflect.construct(target, argumentsList, newTarget)
                }
            },
            /*https://sites.help.adfox.ru/page/45#reload */
            init: function () {
                if (!window.Ya || !window.Ya.hasOwnProperty('adfoxCode')) {
                  //  Banners.loadScript("https://yastatic.net/pcode/adfox/loader.js");
                    if(!window.Ya) {
                        window.Ya = {};
                    }
                    if (!window.Ya.hasOwnProperty('adfoxCode')) {
                        window.Ya.adfoxCode = {};
                    }
                }
                if (window.Ya && window.Ya.hasOwnProperty('adfoxCode')) {
                    if((window.Ya.adfoxCode.__isProxy === undefined))  {
                        if(Banners.debug) {
                            console.log('Decorate adFox in Proxy');
                        }
                        this.original_object = window.Ya.adfoxCode;
                        try {
                            window.Ya.adfoxCode = new Proxy(window.Ya.adfoxCode, this._decorator);
                            window.Ya.adfoxCode.__isProxy = true;
                        } catch (e) {
                            console.log(e);
                        }
                    }
                } else {

                    if(Banners.debug) {
                        console.log('Adfox not loaded:');
                    }
                }
            },
            setOriginal:function()
            {
                if(typeof this.original_object ==='object') {
                    window.Ya.adfoxCode = this.original_object;
                    window.Ya.adfoxCode.__isProxy = false;
                }
            },

            initDecorator: function()
            {
                if((window.Ya.adfoxCode.__isProxy !== true))  {
                    if(Banners.debug) {
                        console.log('Decorate adFox in Proxy');
                    }
                    this.original_object = window.Ya.adfoxCode;
                    try {
                        window.Ya.adfoxCode = new Proxy(window.Ya.adfoxCode, this._decorator);
                        window.Ya.adfoxCode.__isProxy = true;
                    } catch (e) {
                        window.Ya.adfoxCode = new Proxy({}, this._decorator);
                        console.log(e);
                    }
                }
            },
            isInit: function () {
                return (window.hasOwnProperty('Ya') && window.Ya.hasOwnProperty('adfoxCode'));
            },

            headerBidding: function (banner) {
                var options = banner.getOptions();
                if (options.hasOwnProperty('headerBidding') && typeof (options['headerBidding']) === 'object')
                {
                    if(Banners.debug) {
                        console.log('headerBidding: ', options['headerBidding']);
                    }
                    var headerBidding = options['headerBidding'];
                    headerBidding['code'] = banner.getId();
                    if (window.Ya.hasOwnProperty('headerBidding')) {
                        return window.Ya.headerBidding.pushAdUnits([headerBidding]);
                    }
                } else {
                    if(Banners.debug) {
                        console.log('headerBidding: none');
                    }
                }
            },

            beforeRender: function (banner) {
                var options = banner.getOptions();
                if (options.hasOwnProperty('beforeRender') && typeof (options['beforeRender']) === 'function') {
                    if(Banners.debug) {
                        console.log('beforeRender: ', options['beforeRender']);
                    }
                    var beforeRender = options['beforeRender'];
                    beforeRender = Banners.base_adapter.bindBannerToFunction(beforeRender, banner);
                    beforeRender();
                } else {
                    if(Banners.debug) {
                        console.log('beforeRender: none');
                    }
                }
            },
            prepareOptions : function(banner) {
                var element = banner.getElement();
                var options = banner.getOptions();
                if(Banners.debug) {
                     console.log('prepareOptions: start  ', options);
                }

                options['containerId'] = banner.getId();


                /* decorate onLoad */
                if (options.hasOwnProperty('onLoad') && typeof (options['onLoad']) === 'function') {
                    var onLoad = options['onLoad'];
                    options['onLoad'] = Banners.base_adapter.bindBannerToFunction(onLoad, banner);
                }

                /* decorate onRender */
                if (options.hasOwnProperty('onRender') && typeof (options['onRender']) === 'function') {
                    var onRender = options['onRender'];
                    onRender = Banners.base_adapter.bindBannerToFunction(onRender, banner);
                    options['onRender'] = function () {
                        if (typeof (onRender) === 'function') {
                            onRender();
                        }
                       /* var elem = $('#' + banner.getId());
                        elem.css({
                            'height': elem.height()
                        });*/
                    };
                }

                /* decorate onError */
                if (options.hasOwnProperty('onError') && typeof (options['onError']) === 'function') {
                    var onError = options['onError'];
                    options['onError'] = Banners.base_adapter.bindBannerToFunction(onError, banner);
                }
                banner.setData('options', options);
                if(Banners.debug) {
                    console.log('prepareOptions: end', banner.getData('options'));
                }
            },

            render: function (banner) {
                this.prepareOptions(banner);
                this.beforeRender(banner);
                /* adfox prepare headerBidding */
                this.headerBidding(banner);
                if (this.isInit()) {
                    return window.Ya['adfoxCode'].create(banner.getOptions());
                }
                return false;
            },
            beforeReload: function (banner) {
                return Banners.base_adapter.beforeReload(banner);
            },

            reload: function (banner) {
                if (this.isInit()) {
                    return window.Ya['adfoxCode'].reload(banner.getId());
                }
                return false;
            },

            afterReload: function (banner) {
                return Banners.base_adapter.afterReload(banner);
            },

            reloadAll: function () {
                if (this.isInit()) {
                    return window.Ya['adfoxCode'].reload();
                }
                return false;
            },

            initContainer: function (container) {
                return Banners.base_adapter.initContainer(container);
            },

            hide: function (banner) {
                Banners.base_adapter.hide(banner);
            },

            show: function (banner) {
                Banners.base_adapter.show(banner);
            },

            remove: function (banner) {
                Banners.base_adapter.remove(banner);
            }
        }
    },

    bindToFunction: function (func, data /*, args*/) {
        var bindArgs = [].slice.call(arguments, 2); // (1)
        function wrapper() {                        // (2)
            var args = [].slice.call(arguments);
            var unshiftArgs = bindArgs.concat(args);  // (3)
            return func.apply(data, unshiftArgs);  // (4)
        }

        return wrapper;
    },

    closest: function (el, selector) {
        var matchesFn;
        ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'].some(function (fn) {
            if (typeof document.body[fn] == 'function') {
                matchesFn = fn;
                return true;
            }
            return false;
        });
        var parent;
        while (el) {
            parent = el.parentElement;
            if (parent && (parent[matchesFn](selector) || parent.hasAttribute(this.settings.position_attr))) {
                return parent;
            }
            el = parent;
        }
        return null;
    },

    /**
     * @param url
     */
    loadScript: function (url) {
        if (window.XMLHttpRequest) {
            var xhrObj = new XMLHttpRequest();
        } else if (window.ActiveXObject) {
            var xhrObj = new ActiveXObject('Microsoft.XMLHTTP');
        }
        try {
            xhrObj.open('GET', url, false);
            xhrObj.send('');
            var e = document.createElement('script');
            e.type = "text/javascript";
            e.text = xhrObj.responseText;
            document.getElementsByTagName('head')[0].appendChild(e);
        } catch (e) {
            if(Banners.debug){
                console.log('не удалось загрузить скрипт: '+url);
            }
        }
    },

    createBannerContainer: function () {
        var div = document.createElement('div');
        return div;
    },

    uniqueid: function () {
        function randomInteger(min, max) {
            var rand = min - 0.5 + Math.random() * (max - min + 1);
            rand = Math.round(rand);
            return rand;
        }

        return randomInteger(1111, 9999999);
    },

    initBanner: function (type, options, element_id) {
        if (!this.adapter.hasOwnProperty(type)) {
            console.log('Неизвестный тип баннерной системы - ' + type + '!');
            return false;
        }
        var adapter = this.adapter[type];
        adapter.init();
        if (!adapter.isInit()) {
            console.log('Баннерная система не инициализирована');
            return false;
        }
        var element = adapter.initContainer(element_id);
        if (!element) {
            console.log('Не удалось загрузить баннер - ' + type);
            return false;
        }
        element.className += ' banner-' + type;
        element.className += ' banner-container';
        var id = 'banner-' + type + '-' + this.uniqueid();
        element.setAttribute('id', id);
        element.setAttribute(Banners.settings.banner_init_attr ,'1');
        var position_element = this.findBannerPositionElement(element);
        var position = null;
        if (position_element) {
            position = this.getBannersContainerKey(position_element);
        }
        var banner = {
            original_id : element_id,
            id: id,
            options: options,
            element: element,
            type: type,
            adapter: adapter
        };

        if (position) {
            banner['position'] = position;
            banner['position_element'] = position_element;
        }
        banner = new Banner(banner);
        this.banners.set(banner);
        return banner;
    },
    /**
     * @deprecated
     * Инициализирует новый баннер
     *
     * @param type  - тип рекламы для выбора функции инита
     * @param options - объект настроек баннера, передается в адаптер для инициализации
     * @param element - опциональный параметр id div в котором инициировать рекламу,
     * если не передан будет инициация в <div id="banner-init"></div>
     * рекомендуется его добавить перед вызывающим скриптом
     *
     * @returns Banner
     */
    banner: function (type, options, element) {
        var banner = this.initBanner(type, options, element);
        if(banner) {
            banner.getElement().setAttribute(Banners.settings.banner_init_attr, '1');// deprecated
            banner.render();
            return banner;
        }
    },
    /**
     * Ищет родительский елемент, который является позицией баннеров
     * @param banner_element - DOM  элемент контейнера баннера
     *
     * @returns {*}|null  - возвращает объект DOM элемента
     */
    findBannerPositionElement : function(banner_element) {
        var position_container = this.closest(banner_element, this.settings.position_container_class);
        if(position_container) {
            return position_container;
        }
        return null;
    },
    /**
     * Возвращает ключ контейнера баннеров (position)
     * если ключа нет , то создает ключ и пишет в атрибут data-key
     * @param banners_position_element - элемент полученный через {@see Banners.findBannerPositionElement()}
     *
     * @returns str|null - Возвращает строковый идентификатор (banner_top, banner_right_1...)
     */
    getBannersContainerKey: function (banners_position_element) {
        if (banners_position_element) {
            var id = banners_position_element.getAttribute(this.settings.position_attr);
            if (!id) {
                id = 'banners-container-id-' + this.uniqueid();
                banners_position_element.setAttribute(this.settings.position_attr, id);
            }
            return id;
        }
        return null;
    },
    /**
     *
     * @returns BannersCollection
     */
    getBannersVisible: function () {
        return this.banners.filter('is_visible', true);
    },

    /**
     * Функция перезагружает все банеры
     * если задан тип, то только баннеры определенного типа
     * @param string type - тип баннеров (адаптер)
     */

    reloadAll: function () {
        if(this.getReloadTimer() > this.reload_all_min_time) {
            for(var adapter_type in this.adapter)  {
                var adapter = this.adapter[adapter_type];
                if(adapter.hasOwnProperty('reloadAll') && typeof (adapter.reloadAll)==='function') {
                    adapter.reloadAll();
                    this.startReloadTimer();
                } else {
                    this.banners.filter('type', adapter_type).reload();
                }
            }
        }

    },

    /**
     *
     * Функция перезагружает все банеры в текущей видимости монитора (видимые сейчас)
     * если задан тип, то только баннеры определенного типа
     * @param string type - тип баннеров (адаптер)
     */
    reloadVisible: function () {
        this.getBannersVisible().reload();
    },

    /**
     * Скрывает все баннеры или баннеры определенного типа
     *
     * @param string|null adapter_type - если передан тип, то скроет только баннеры данного типа (адаптера)
     * @param bool save - если передано, то значение сохранится и баннеры будут скрываться всегда
     */
    hideAll: function (adapter_type, save) {
        if (save) {
            $_COOKIE.set('Banners_js', 'hide');
        }
        var collection = this.banners;
        if (adapter_type) {
            collection = collection.filter('type', adapter_type);
        }
        collection.hide();
    },

    /**
     * Показывает все баннеры или баннеры определенного типа
     *
     * @param string|null adapter_type - если передан тип, то покажет (отменит скрытие) баннеры данного типа (адаптера)
     * @param bool save - если передано, то значение сохранится и баннеры будут показываться всегда(отмена установки постоянного скрытия)
     */
    showAll: function (adapter_type, save) {
        if (save) {
            $_COOKIE.set('Banners_js', 'show');
        }

        var collection = this.banners;
        if (adapter_type) {
            collection = collection.filter('type', adapter_type);
        }
        collection.show();

    },
    getReloadTimer: function () {
        return (Math.floor(Date.now() / 1000)) - this.reload_all_timer;
    },
    startReloadTimer: function () {
        this.reload_all_timer = Math.floor(Date.now() / 1000);
    },
    removeAll: function () {
        this.banners.remove();
    }
};

Banners.init();