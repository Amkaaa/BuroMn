( function( window ) {
	/**/
	
	var appendCriticalCss = function () {
		var critical_css = '.vms_article_parent,[data-vms-version="1"]{position:relative;margin:0 auto;-webkit-text-size-adjust: 98%;}.vms_article_parent{width:100%;z-index:1;overflow:hidden}.vms_article_parent.article_background-size--cover{background-size:cover;background-position:center center}.vms_article_parent.article_background-size--tile{background-size:auto;background-repeat:repeat;background-position:center}[data-vms-version="1"].body--mobile{width:100%!important;padding:15px!important;margin:0!important;height:auto!important;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}[data-vms-version="1"].body--desktop [data-devices-mode=mobile]{display:none}[data-vms-version="1"].body--wide{width:100%!important}[data-vms-version="1"] .object[data-type=colorchanger]{pointer-events:none!important}settings{display:none!important}[data-vms-version="1"] .object .data,[data-vms-version="1"] .object[data-type=background]{display:none}[data-type=slider] .slider .fotorama__arr{width:50%;height:100%;top:0;background-image:none!important;opacity:1!important}[data-vms-version="1"] .hide_object{position:absolute;left:-9999px;top:-9999px;overflow:hidden;visibility:hidden}[data-vms-version="1"] .object{position:absolute;top:0;left:0;z-index:10}[data-vms-version="1"] .object .content{position:relative;z-index:2;width:100%;height:100%;overflow:hidden;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}[data-vms-version="1"] .object .content .content_link{position:absolute;z-index:10;width:100%;height:100%;left:0;top:0}[data-vms-version="1"] .object.hide{opacity:0}[data-vms-version="1"] .object--mobile{position:relative!important;top:auto!important;left:auto!important;width:100%!important;height:auto!important;margin-bottom:20px;padding:0}[data-vms-version="1"] .object--mobile .content{padding:0!important}[data-vms-version="1"] .object--mobile[data-devices-mode=mobile],[data-vms-version="1"] .object--mobile[data-devices-mode=both]{display:block}[data-vms-version="1"] .object--mobile[data-devices-mode=both][data-type=text] br{display:none!important}[data-vms-version="1"] .object--mobile[data-devices-mode=desktop],[data-vms-version="1"] .object[data-type=embed] xmp{display:none}[data-vms-version="1"] .object[data-type=ajpg] .content{height:100%}[data-vms-version="1"] .object[data-type=ajpg].object--mobile{height:0!important}[data-vms-version="1"] .object[data-type=ajpg].object--mobile .content{position:absolute;left:0;top:0}[data-vms-version="1"] .object[data-type=embed] .content{width:100%;height:100%;position:relative;z-index:2}[data-vms-version="1"] .object[data-type=image] img,[data-vms-version="1"] .object[data-type=slider] img{display:block;width:100%}[data-vms-version="1"] .object[data-type=shape].object--mobile,[data-vms-version="1"] .object[data-type=text].object--mobile .editor .float{display:none}[data-vms-version="1"] .object[data-type=media] .content{width:100%;height:100%}[data-vms-version="1"] .object[data-type=shape] .content{background:#000}[data-vms-version="1"] .object[data-type=text]{background:rgba(255,255,255,0);-webkit-touch-callout:auto;-webkit-user-select:auto;-khtml-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}[data-vms-version="1"] .object[data-type=text] .content{width:100%;height:100%;overflow:visible}[data-vms-version="1"] .object[data-type=text] .editor{width:100%;height:100%}[data-vms-version="1"] .object[data-type=text].object--mobile h1,[data-vms-version="1"] .object[data-type=text].object--mobile p,[data-vms-version="1"] .object[data-type=text].object--mobile span{word-break:break-word}[data-vms-version="1"] .object[data-type=before_after] .before_after{width:100%;height:100%;position:relative}[data-vms-version="1"] .object[data-type=before_after] .before_after__scene{width:100%;height:100%;background:#eee} .section-2cols.infinite-article-pages, .page-article .row {position: relative; z-index: 1;}',
		head = document.head || document.getElementsByTagName('head')[0],
		style = document.createElement('style');
		
		style.type = 'text/css';
		style.id = 'verstka-critical';
		
		if (style.styleSheet){
		  style.styleSheet.cssText = critical_css;
		} else {
		  style.appendChild(document.createTextNode(critical_css));
		}
		
		head.appendChild(style);
	};
	
	appendCriticalCss();
	
	/*!
	  * domready (c) Dustin Diaz 2014 - License MIT
	  */
	!function(e,t){typeof module!="undefined"?module.exports=t():typeof define=="function"&&typeof define.amd=="object"?define(t):this[e]=t()}("domready",function(){var e=[],t,n=document,r=n.documentElement.doScroll,i="DOMContentLoaded",s=(r?/^loaded|^c/:/^loaded|^i|^c/).test(n.readyState);return s||n.addEventListener(i,t=function(){n.removeEventListener(i,t),s=1;while(t=e.shift())t()}),function(t){s?setTimeout(t,0):e.push(t)}})
	
	var Collection = function( parameters ) {
	    this.items = [];
	    this.items_length = 0;
	
	    this.setConstructor( parameters.constructor );
	    this.setDestructor( parameters.destructor );
	};
	
	Collection.prototype.setConstructor = function( fn ) {
	    this.constructor = fn || function() {};
	    
	    return this;
	};
	
	Collection.prototype.setDestructor = function( fn ) {
	    this.destructor = fn || function() {};
	    
	    return this;
	};
	
	Collection.prototype.getLength = function() {
	    return this.items_length;
	};
	
	Collection.prototype.getElements = function() {
	    return this.items.map( function( item ) {
	        return item.element;
	    } );
	};
	
	Collection.prototype.each = function( iterator ) {
	    var i,
	        item;
	    
	    for ( i = 0; i < this.items_length; i++ ) {
	        item = this.items[ i ];
	    
	        if ( iterator( item.element, item.data, i, this.items_length ) === false ) {
	            break;
	        }
	    }
	    
	    return this;
	};
	
	Collection.prototype.index = function( element ) {
	    var index = -1;
	
	    this.each( function( current_element, data, i ) {
	        if ( current_element === element ) {
	            index = i;
	            return false;
	        }
	    } );
	    
	    return index;
	};
	
	Collection.prototype.has = function( element ) {
	    return this.index( element ) > -1;
	};
	
	Collection.prototype.add = function( element, options ) {
	    var that = this;
	
	    if ( this.has( element ) === false ) {
	        this.items[ this.items_length++ ] = {
	            element: element,
	            data: that.constructor( element, options ),
	            options: options
	        };
	    
	        return true;
	    } else {
	        return false;
	    }
	};
	
	Collection.prototype.remove = function( element ) {
	    var index = this.index( element ),
	        item;
		
	    if ( index > -1 ) {
	    	
	        item = this.items[ index ];
	        
	        this.destructor( item.element, item.data, item.options );
	        
	        this.items.splice( index, 1 );
	        this.items_length--;
	    
	        return true;
	    } else {
	        return false;
	    }
	};
	
	Collection.prototype._processFew = function( action_name, elements, options ) {
	    var length = elements.length,
	        i;
	        
	    for ( i = 0; i < length; i++ ) {
	        this[ action_name ]( elements[ i ], options );
	    }
	    
	    return this;
	};
	
	Collection.prototype.addFew = function( elements, options ) {
	    return this._processFew( 'add', elements, options );
	};
	
	Collection.prototype.removeFew = function( elements ) {
	    return this._processFew( 'remove', elements );
	};
	
	Collection.prototype.merge = function( selector, options ) {
	    return this.addFew( document.querySelectorAll( selector ), options );
	};
	
	Collection.prototype.scatter = function( selector ) {
	    return this.removeFew( document.querySelectorAll( selector ) );
	};
	
	Collection.prototype.clear = function() {
	    return this.removeFew( this.getElements() );
	};
	
	Collection.prototype.filter = function( filter ) {
	    var that = this;
	
	    this.each( function( element, data, i, length ) {
	        if ( filter( element, data, i, length ) !== true ) {
	            that.remove( item.element );
	        }
	    } );
	    
	    return this;
	};
	
	Collection.prototype.refresh = function() {
	    var elements = this.getElements();
	    
	    this.clear();
	    this.addFew( elements );
	    
	    return this;
	};
	
	/**/

	var domObserver = function ($element, callback) {
		MutationObserver = window.MutationObserver || window.WebKitMutationObserver || function(callback) {
			var mo = this,
				id = Math.round( 299792458 * Math.random() );
			
			mo.observe = function() {
				$element.on( 'DOMSubtreeModified.' + id, callback );
			};
			
			mo.disconnect = function() {
				$element.off( 'DOMSubtreeModified.' + id );
			};
			
			mo.takeRecords = function() {
			};
		};
		
		var observer = new MutationObserver(callback);
		
		observer.observe($element.get(0), {
			childList: true,
			attributes: true,
			subtree: true
		} );
		
		return observer;
	};
	
	/**/
	
	window.VMS_API = window.VMS_API || new function() {
		var api = this,
			artciles_collection,
			root_path = '//verstka.io/plugins/versions/1/builds/',
			dev_root_path = '//dev.verstka.io/plugins/versions/1/builds/',
			dev_version_str = 'dev.verstka.io',
			global_article_options;
		
		var is_dev = (function (str) {
			var scripts = document.getElementsByTagName("script"),
			    script,
			    dev = false;
			
			for (var i = 0; i < scripts.length; ++i) {
				script = scripts[i].src;
				
				if( script !== null && script.indexOf(str) !== -1){
					dev = true;
				}
			}
			
			return dev;
		})(dev_version_str);
		
		root_path = (is_dev === false) ? (root_path) : (dev_root_path);

		api.includeScript = function( src, callback ) {
			var head = document.getElementsByTagName( 'head' )[ 0 ],
				script = document.createElement( 'script' );
				
		    script.type = 'text/javascript';
		    
		    if (window.location.protocol == 'file:') {
		    	script.src = 'http:' + src;
		    }else{
		    	script.src = src;
		    }
		
		    script.onreadystatechange = callback;
		    script.onload = callback;
		
		    head.appendChild( script );
		};
		
		api.includeStyle = function( src, callback ) {
			var head  = document.getElementsByTagName( 'head' )[ 0 ],
				link  = document.createElement( 'link' );
				
		    link.rel  = 'stylesheet';
		    link.type = 'text/css';
		    
		    if (window.location.protocol == 'file:') {
		    	link.href = 'http:' + src;
		    }else{
		    	link.href = src;
		    }
		    
		    link.media = 'all';
		    
		    link.onreadystatechange = callback;
		    link.onload = callback;
		    
		    head.appendChild( link );
		};
		
		api.View = new function() {
			var self = this,
				processed = {};
		
			self.items = {};
			
			self.formViewKey = function( v, c ) {
				return 'v' + v + '_' + c;
			};
			
			self.add = function( v, c, content ) {
				self.items[ self.formViewKey( v, c ) ] = content;
			};
			
			self.get = function( v, c ) {
				return self.items[ self.formViewKey( v, c ) ];
			};
			
			self.use = function( version, client, callback ) {
				var view = self.get( version, client ),	
					key = self.formViewKey( version, client );
				
				if ( view !== undefined ) {
					callback && callback( view );
				} else {
					if ( processed[ key ] === undefined ) {
						processed[ key ] = [];
						
						api.includeStyle( root_path + client + '_main.css', function() {
							api.includeScript( root_path + client + '_main.js', function() {
								view = self.get( version, client );
															
								view.whenInit(function () {
									view.setOptions(global_article_options);							
								});
								
								processed[ key ].forEach( function( clb ) {
									clb( view === undefined ? null : view );
								} );
							} );
						} );
					}
					
					processed[ key ].push( callback );
				}
			};
		};
		
		api.Article = new function() {
			var self = this,
				display_mode;
			
			var useArticle = function( article_element, callback ) {
				var version = article_element.getAttribute( 'data-vms-version' ) || '0',
					client = article_element.getAttribute( 'data-vms-client' ) || 'unknown';
					
				api.View.use( version, client, callback );
				
				return {
					version: version,
					client: client
				};
			};
			
			var articleConstructor = function( article_element ) {
				var result = {},
					used;
					
				used = useArticle( article_element, function( view ) {
					if ( view !== null ) {
						view.whenInit( function() {
							view.enable( article_element );
						} );
						
						result.view = view;
					} else {
						console.warn( 'VMS API -> Article.enable: couldn\'t find view of version "%s" for client "%s"', version, client );
					}
				} );
					
				result.version = used.version;
				result.client = used.client;
				
				return result;
			};
			
			var articleDestructor = function( article_element, data ) {
				useArticle( article_element, function( view ) {
					if ( view !== null ) {
						view.whenInit( function() {
							if (global_article_options !== undefined) {
								view.disable( /* no arguments */ );
								global_article_options = undefined;
							}
						} );
					} else {
						console.warn( 'VMS API -> Article.disable: couldn\'t find view of version "%s" for client "%s"', version, client );
					}
				} );
			};
			
			artciles_collection = new Collection( {
				constructor: articleConstructor,
				destructor: articleDestructor
			} );
			
			self.changeDisplayMode = function (mode_name) {
				display_mode = mode_name;
				
				var views_objs = api.View.items;
				
				for (var key in views_objs) {
				    if (!views_objs.hasOwnProperty(key)) continue;
					
					views_objs[key].changeDisplayMode(mode_name);
				}
			};
			
			self.clearCache = function () {
				artciles_collection.each( function(element, object) {
					object.view && object.view.clearArticleCache();
				} );
			};
			
			self.enable = function( options ) {
				options = options || {};
			
				if (options.article_selector === undefined) {
					options.article_selector = '[data-vms-version]';
				}
				
				global_article_options = options;
				
				artciles_collection.merge( options.article_selector, options );
				
				if (options.observe_selector && window.jQuery) {
					$(options.observe_selector).each(function () {
						domObserver($(this), function () {
							$(window).resize();
						});
					});
				}
				
				self.init_options = options;
			};
			
			self.refresh = function () {
				$(window).resize();
			};
			
			self.disable = function() {
				artciles_collection.clear();
			};
			
		};
		
		api.init = function() {
			domready(function () {
				window.onVMSAPIReady && window.onVMSAPIReady( api );
				api.is_ready = true;
			});
		};
		
		api.init();
	};
} )( window );